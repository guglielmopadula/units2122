All files should be compiled using openmpi 4.1.1 and gnu 9.3.0

The script section1.sh deletes all binaries, csv, and jpeg, compiles the two programs, executes them more times and 
then provides necessary tables and graphs. For the details please see the report.

All python scripts have been tested in a conda enviroment with all required modules installed.

RING PART

Compiling is done by mpic++ ring.cc -o ring -std=c++11

Running is done by  mpirun -np "number of processor"  ./ring.

Running part for the python version is done by mpirun -np "number of processor"  python ring.py, from a conda enviroment in which all necessary modules are installed.


MATRIX PART

Compiling is done by mpic++ summatrix.cc -o summatrix -std=c++11 and by mpic++ summatrixfast.cc -o summatrixfast -std=c++11 

Running from summatrix is done by mpirun -np 24 ./summatrix size1 size2 size3 ndimtopology size1top size2top size3top
where size1xsize2xsize3 is the dimension of the matrix we want to sum, ndimtopoly can be 1,2,3 and specifies is the topology
is 1D,2D,or 3D. size1top is the size of the first dimension of the topology, size2top is the second and size3top is the third.
Note that size2top and size3top are ignored if ndimtopology is 1 and size3top is ignored if ndimtopology is 2.

Example
mpirun -np 24 ./summatrix 2400 100 100 3 4 3 2 creates a 3D  4x3x2 topology  and two matrices 2400x100x100

mpirun -np 24 ./summatrix 1200 200 100 2 6 4 creates a 2D 6x4 topology and two matrices 1200x200x100

Note that the total size of the topology must be the number of processors specifed in -np.

Running for summatrixfast is done by mpirun -np 24 ./summatrix size1 size2 size3

For the python versions commands are mpirun -np 24 python summatrix.py size1 size2 size3 ndimtopology size1top size2top size3top
and mpirun -np 24 python summatrix.py size1 size2 size3

